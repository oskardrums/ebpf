@author Oskar Mazerath <moskar.drummer@gmail.com>
@copyright 2021 Oskar Mazerath
@version 0.2.3
@title ebpf - Erlang eBPF Library

@doc `ebpf' is an Erlang library for generating and interacting
with eBPF programs.

== Contents ==

<ol>
  <li>{@section Introduction}</li>
  <li>{@section Generating eBPF code}</li>
  <li>{@section Interacting with eBPF programs}</li>
  <li>{@section Interacting with eBPF maps}</li>
</ol>

== Introduction ==

`ebpf' has two main functionalities:
<ul>
  <li>Generating eBPF programs that can run in the Linux kernel from Erlang</li>
  <li>Interacting with eBPF programs from Erlang</li>
</ul>
The first is implemented in {@link ebpf_kern}, the latter in {@link ebpf_user}.
These modules are related, and can integrate with each other, but they can act seperately
and are not dependent on each other.

`ebpf' also includes the {@link ebpf_asm} module for assembling
`ebpf_kern' generated instructions into eBPF binary code, and the
{@link ebpf_maps} module which serves as an API the eBPF maps.

== Generating eBPF code ==

See {@link ebpf_kern}.

== Interacting with eBPF programs ==

See {@link ebpf_user}.

== Interacting with eBPF maps ==

eBPF maps are the main method of keeping state and communicating with userspace
in eBPF programs.
The standard workflow with eBPF maps is creating and initializing a map `Map' from
userspace, then loading an eBPF program `Prog' that accesses `Map', e.g.
to read some configuration data, and then using from userspace `Map' to interact
with `Prog', e.g. by updating the configuration stored in `Map' or reading values
that `Prog' may have updated.

For the interacting with eBPF maps from userspace, see {@link ebpf_maps}.

@end
